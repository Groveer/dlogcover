/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Source file was org.deepin.ai.daemon.VectorIndex.xml
 *
 * qdbusxml2cpp is Copyright (C) The Qt Company Ltd. and other contributors.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef VECTORINDEX_H
#define VECTORINDEX_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.deepin.ai.daemon.VectorIndex
 */
class OrgDeepinAiDaemonVectorIndexInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.deepin.ai.daemon.VectorIndex"; }

public:
    OrgDeepinAiDaemonVectorIndexInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgDeepinAiDaemonVectorIndexInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> Create(const QString &appID, const QStringList &files)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appID) << QVariant::fromValue(files);
        return asyncCallWithArgumentList(QStringLiteral("Create"), argumentList);
    }

    inline QDBusPendingReply<bool> Delete(const QString &appID, const QStringList &files)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appID) << QVariant::fromValue(files);
        return asyncCallWithArgumentList(QStringLiteral("Delete"), argumentList);
    }

    inline QDBusPendingReply<QStringList> DocFiles(const QString &appID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appID);
        return asyncCallWithArgumentList(QStringLiteral("DocFiles"), argumentList);
    }

    inline QDBusPendingReply<bool> Enable()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Enable"), argumentList);
    }

    inline QDBusPendingReply<QString> Search(const QString &appID, const QString &query, int topK)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appID) << QVariant::fromValue(query) << QVariant::fromValue(topK);
        return asyncCallWithArgumentList(QStringLiteral("Search"), argumentList);
    }

    inline QDBusPendingReply<QString> getAutoIndexStatus(const QString &appID)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appID);
        return asyncCallWithArgumentList(QStringLiteral("getAutoIndexStatus"), argumentList);
    }

    inline QDBusPendingReply<> setAutoIndex(const QString &appID, bool on)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(appID) << QVariant::fromValue(on);
        return asyncCallWithArgumentList(QStringLiteral("setAutoIndex"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void IndexDeleted(const QString &appID, const QStringList &files);
    void IndexStatus(const QString &appID, const QStringList &files, int status);
};

namespace org {
  namespace deepin {
    namespace ai {
      namespace daemon {
        using VectorIndex = ::OrgDeepinAiDaemonVectorIndexInterface;
      }
    }
  }
}
#endif
