/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Source file was org.deepin.ai.daemon.QueryLang.xml
 *
 * qdbusxml2cpp is Copyright (C) The Qt Company Ltd. and other contributors.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef QUERYLANG_H
#define QUERYLANG_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.deepin.ai.daemon.QueryLang
 */
class OrgDeepinAiDaemonQueryLangInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.deepin.ai.daemon.QueryLang"; }

public:
    OrgDeepinAiDaemonQueryLangInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgDeepinAiDaemonQueryLangInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> Enable()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Enable"), argumentList);
    }

    inline QDBusPendingReply<QString> Query(const QString &content)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(content);
        return asyncCallWithArgumentList(QStringLiteral("Query"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace deepin {
    namespace ai {
      namespace daemon {
        using QueryLang = ::OrgDeepinAiDaemonQueryLangInterface;
      }
    }
  }
}
#endif
