---
description: 
globs: 
alwaysApply: false
---
# DLogCover 项目概述

## 项目基本信息

DLogCover是一个基于Clang/LLVM的C++日志覆盖率分析工具，通过静态代码分析技术评估C++项目中的日志记录覆盖情况，帮助开发团队提高代码质量和可维护性。

### 项目完整文档体系

项目采用分层化的文档管理系统，详细信息请参考：

#### Memory Bank 核心文档（已完成）
- **[projectbrief.md](mdc:memory-bank/projectbrief.md)** - 项目基础文档，定义核心需求和目标
- **[productContext.md](mdc:memory-bank/productContext.md)** - 产品上下文，说明产品价值和用户体验目标
- **[systemPatterns.md](mdc:memory-bank/systemPatterns.md)** - 系统架构模式和设计原则
- **[techContext.md](mdc:memory-bank/techContext.md)** - 技术上下文，开发环境和技术约束
- **[activeContext.md](mdc:memory-bank/activeContext.md)** - 当前工作焦点和近期变化
- **[progress.md](mdc:memory-bank/progress.md)** - 项目进展状态和里程碑

#### 传统项目文档
- **[产品需求文档.md](mdc:docs/产品需求文档.md)** - 详细的功能需求和使用场景
- **[README.md](mdc:README.md)** - 主要项目说明和使用指南

### 项目状态总览

- **当前版本**：0.1.0
- **开发阶段**：功能完善期（80%成熟度）
- **主要语言**：Modern C++17
- **核心技术**：Clang/LLVM LibTooling
- **构建系统**：CMake 3.10+
- **测试覆盖率**：82%（目标90%+）
- **开源协议**：GNU GPL v3

### 当前开发焦点（2024年12月）

**配置和文档系统全面更新**：
- [x] Memory Bank系统建立完成（6个核心文件）
- [x] README.md开源协议更新至GPL v3
- [ ] Cursor Rules系统优化（正在进行）
- [ ] 项目文档与代码同步

## 核心目标和价值主张

### 主要目标
- **提高代码质量和可维护性**：确保关键代码路径都有适当的日志记录
- **降低生产环境问题定位难度**：通过完善的日志覆盖率减少故障排查时间
- **减少运维成本**：预防性发现日志缺失问题，避免生产环境的调试困难
- **提升开发团队效率**：自动化的日志覆盖率检查，减少人工审查工作量

### 目标用户群体
- **C++开发工程师**：日常开发中使用工具进行代码质量检查
- **质量保证工程师**：在CI/CD流程中集成使用，确保代码质量
- **技术负责人**：通过覆盖率报告了解项目整体日志质量状况

### 核心功能特性
- **多层次覆盖分析**：函数级、分支级、异常处理级覆盖率分析
- **灵活的日志系统支持**：Qt日志系统和自定义日志函数
- **多格式报告输出**：文本格式和JSON格式报告
- **高性能静态分析**：支持大型项目（100万行代码<30分钟）

## 技术架构概览

### 分层架构设计
```
┌─────────────────────────────────┐
│         用户接口层                │
│     (CLI + Configuration)       │
└─────────────────────────────────┘
           │
┌─────────────────────────────────┐
│         应用服务层                │
│     (Orchestration Layer)      │
└─────────────────────────────────┘
           │
┌─────────────────────────────────┐
│         业务逻辑层                │
│  (AST Analysis + Log Detection) │
└─────────────────────────────────┘
           │
┌─────────────────────────────────┐
│         数据访问层                │
│   (File System + LLVM APIs)    │
└─────────────────────────────────┘
```

### 核心模块组成
1. **命令行接口模块** (src/cli/) - 用户交互和参数处理
2. **配置管理模块** (src/config/) - 分层配置系统
3. **源文件管理模块** (src/source_manager/) - 文件收集和过滤
4. **AST分析引擎** (src/core/ast_analyzer/) - 基于Clang的代码解析
5. **日志识别器** (src/core/log_identifier/) - 日志函数调用识别
6. **覆盖率计算器** (src/core/coverage/) - 覆盖率指标计算
7. **报告生成器** (src/reporter/) - 多格式报告输出

### 设计原则
- **单一职责原则（SRP）**：每个模块专注于特定功能领域
- **开闭原则（OCP）**：使用策略模式支持扩展
- **依赖倒置原则（DIP）**：通过抽象接口解耦模块依赖

## 当前开发状态

### 已完成功能（90%+）
- [x] **核心分析引擎**：基于Clang/LLVM的AST分析
- [x] **日志识别系统**：Qt日志和自定义日志函数支持
- [x] **覆盖率计算**：多层次覆盖率分析算法
- [x] **命令行接口**：完整的CLI和配置系统
- [x] **报告生成**：文本和JSON格式报告

### 正在进行的工作
- [x] **Memory Bank系统**：完整的项目文档体系
- [ ] **Cursor Rules优化**：开发规则和最佳实践
- [ ] **性能优化**：大型项目分析性能提升

### 计划开发功能
- [ ] **HTML交互式报告**：可视化覆盖率展示
- [ ] **CI/CD集成**：GitHub Actions和Jenkins支持
- [ ] **IDE插件**：VS Code和CLion集成
- [ ] **智能分析建议**：基于模式识别的改进建议

## 项目结构和文件组织

### 主要目录结构
```
dlogcover/
├── memory-bank/          # Memory Bank文档系统
├── .cursor/rules/        # Cursor开发规则
├── src/                  # 源代码目录
│   ├── cli/             # 命令行接口
│   ├── config/          # 配置管理
│   ├── core/            # 核心分析引擎
│   ├── reporter/        # 报告生成
│   └── utils/           # 工具函数库
├── include/dlogcover/    # 头文件目录
├── tests/               # 测试代码
├── docs/                # 项目文档
├── examples/            # 示例项目
└── cmake/               # CMake模块
```

### 关键配置文件
- **[CMakeLists.txt](mdc:CMakeLists.txt)** - 主要构建配置
- **[dlogcover.json](mdc:dlogcover.json)** - 默认分析配置
- **[.clang-format](mdc:.clang-format)** - 代码格式化规范

## 开发和贡献指南

### 开发环境要求
- **操作系统**：Linux（推荐）、macOS、Windows
- **编译器**：GCC 7.0+、Clang 6.0+、MSVC 2019+
- **依赖库**：LLVM/Clang 10.0+、nlohmann/json、GoogleTest
- **构建工具**：CMake 3.10+

### 代码规范
- 遵循 **[06-code-style-guide.mdc](mdc:06-code-style-guide.mdc)** 中的代码风格
- 使用 **[12-cpp-guidelines.mdc](mdc:12-cpp-guidelines.mdc)** 中的C++最佳实践
- 参考 **[10-llvm-clang-usage.mdc](mdc:10-llvm-clang-usage.mdc)** 进行LLVM/Clang开发

### 测试和质量保证
- 遵循 **[08-testing-and-qa.mdc](mdc:08-testing-and-qa.mdc)** 中的测试策略
- 维护 > 80% 的代码覆盖率
- 所有代码必须通过静态分析检查

### 开发工作流
- 使用 **[09-development-workflow.mdc](mdc:09-development-workflow.mdc)** 中定义的开发流程
- 功能开发前先编写测试用例
- 代码审查覆盖率100%

## 性能和质量指标

### 性能基准
- **单文件分析**：< 1秒（1000行代码）
- **中型项目**：< 5分钟（10万行代码）
- **大型项目**：< 30分钟（100万行代码）
- **内存使用**：基础内存<200MB，大型项目峰值<4GB

### 质量指标
- **代码覆盖率**：82%（目标90%+）
- **静态分析通过率**：95%
- **文档完整性**：85%（持续改进中）
- **用户满意度**：目标>4.5/5.0

## 项目路线图

### 近期目标（2024年Q4）
- [x] Memory Bank系统建立
- [ ] Cursor Rules优化完成
- [ ] 性能优化和稳定性提升
- [ ] 文档体系完善

### 中期目标（2025年Q1-Q2）
- [ ] 1.0.0版本发布
- [ ] HTML报告和可视化功能
- [ ] CI/CD深度集成
- [ ] IDE插件开发

### 长期愿景（2025年下半年）
- [ ] 多语言支持（Java、Python）
- [ ] AI辅助分析功能
- [ ] 企业级部署方案
- [ ] 社区生态建设

## 社区和支持

### 项目治理
- **核心维护团队**：2-3名活跃贡献者
- **代码审查**：所有代码变更需要审查
- **问题响应**：<24小时响应时间目标

### 贡献方式
- 提交Bug报告和功能请求
- 贡献代码和文档改进
- 参与社区讨论和技术分享
- 提供测试用例和使用反馈

### 许可和版权
- **许可证**：MIT License
- **开源政策**：完全开源，欢迎社区贡献
- **商业使用**：允许商业使用和修改

这个项目概览为开发者提供了DLogCover项目的全面视图，是理解和参与项目开发的重要入口点。

## 开源协议和法律信息

### GNU General Public License v3.0

本项目采用GNU通用公共许可证第3版（GPL v3），这意味着：

#### 权利保障
- **使用自由**：可以自由运行、学习、修改和分发本软件
- **源码获取**：有权获得完整的源代码
- **修改权利**：可以修改软件以满足特定需求
- **分发权利**：可以分发原版或修改版本

#### 义务要求  
- **开源要求**：如果分发修改版本，必须以相同的GPL v3许可证开源
- **版权保留**：必须保留原有的版权声明和许可证信息
- **修改标识**：修改版本需要明确标识变更内容
- **无担保声明**：软件按"原样"提供，不提供任何形式的担保

#### 法律保护
- **专利保护**：防止专利被用来限制GPL软件的自由
- **反破解条款**：禁止使用技术手段限制用户的修改权利
- **兼容性**：与其他GPL v3兼容的许可证项目可以组合使用

更多详情请参阅：https://www.gnu.org/licenses/gpl-3.0.html
