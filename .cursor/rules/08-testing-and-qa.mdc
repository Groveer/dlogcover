---
description:
globs:
alwaysApply: false
---
---
description: 测试与质量保证规范
globs: **/*.cpp, **/*.h, **/test/**
alwaysApply: true
---
# DLogCover 测试与质量保证指南

## 测试原则

### 测试覆盖率要求
- 函数覆盖率：至少80%
- 条件分支覆盖率：至少70%
- 异常处理覆盖率：至少90%
- 关键路径覆盖率：100%

### 测试驱动开发
- 在实现功能前编写测试
- 先编写失败的测试，再编写使测试通过的代码
- 通过测试覆盖明确需求细节

## 单元测试

### 单元测试框架
- 使用GoogleTest作为单元测试框架
- 遵循AAA模式：Arrange（准备）, Act（执行）, Assert（断言）
- 每个测试只测试一个概念或行为

```cpp
TEST(LogAnalyzerTest, DetectsQtLogFunctions) {
    // Arrange - 准备测试数据和对象
    LogAnalyzer analyzer;
    std::string code = "void foo() { qDebug() << \"test\"; }";
    
    // Act - 执行被测试的操作
    auto result = analyzer.analyze(code);
    
    // Assert - 验证结果
    EXPECT_EQ(1, result.logCalls.size());
    EXPECT_EQ("qDebug", result.logCalls[0].functionName);
}
```

### 测试命名
- 测试类命名：`<被测类名>Test`
- 测试函数命名：`<测试内容描述>`，使用动词开头，表明测试的行为和预期结果

### 模拟对象
- 使用GoogleMock创建模拟对象
- 不要过度模拟，只模拟外部依赖
- 明确模拟对象的行为预期

## 集成测试

### 集成测试范围
- 测试模块间交互
- 测试与外部系统的集成
- 测试端到端流程

### 测试数据
- 使用固定的测试数据集
- 避免测试依赖外部环境
- 适当使用测试夹具(fixtures)准备和清理测试环境

## 性能测试

### 性能指标
- 内存使用：分析大型文件时的内存占用
- 执行时间：完成分析的时间
- 响应性：用户界面响应时间

### 性能测试方法
- 使用基准测试框架（如Google Benchmark）
- 在不同规模的代码基础上测试
- 比较不同版本间的性能变化

## 持续集成

### CI流程
- 每次提交自动运行单元测试
- 定期运行集成测试和性能测试
- 自动生成测试覆盖率报告

### 质量门禁
- 代码风格检查必须通过
- 单元测试必须全部通过
- 测试覆盖率必须达到要求
- 不允许引入新的编译警告

## 代码审查

### 审查要点
- 代码是否符合风格指南
- 是否有适当的测试覆盖
- 算法和数据结构选择是否合适
- 是否考虑了异常情况和错误处理
- 是否有足够的日志记录

### 审查流程
- 提交前自审
- 团队成员交叉审查
- 解决所有审查意见后才能合并
