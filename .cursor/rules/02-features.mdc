---
description: 
globs: 
alwaysApply: false
---
# DLogCover 功能规格和特性

## 功能概述和文档体系

DLogCover提供全面的C++日志覆盖率分析功能，详细的功能设计和实现请参考Memory Bank文档系统：

### Memory Bank核心文档引用
- **[productContext.md](mdc:memory-bank/productContext.md)** - 功能价值主张和解决的核心问题
- **[systemPatterns.md](mdc:memory-bank/systemPatterns.md)** - 系统架构和组件设计模式
- **[progress.md](mdc:memory-bank/progress.md)** - 功能模块实现状态和计划

### 当前功能实现状态（2024年12月）
- **核心分析引擎**：90%完成度
- **日志识别系统**：95%完成度  
- **覆盖率计算**：88%完成度
- **用户接口**：85%完成度
- **报告生成**：80%完成度

## 核心功能模块

### 1. 静态代码分析引擎

#### AST 分析器 (已实现稳定运行)
- **基于 Clang/LLVM LibTooling**
  - 支持C++11/14/17标准，C++20部分支持
  - 完整的语法树解析和遍历
  - 高精度的代码结构识别

- **支持的代码结构**
  - [x] 函数声明和定义（包括成员函数、自由函数）
  - [x] 条件分支（if/else、switch/case、三元操作符）
  - [x] 循环结构（for、while、do-while、range-based for）
  - [x] 异常处理（try-catch-finally、throw语句）
  - [x] 类和结构体（成员函数、构造函数、析构函数）
  - [x] 命名空间和作用域
  - [x] 模板函数和类模板
  - [x] Lambda表达式
  - [x] 嵌套代码块和复杂控制流

- **高级特性支持**
  - [x] 模板函数实例化分析
  - [x] 函数重载识别
  - [x] 继承关系分析
  - [x] 宏展开后的代码分析（部分支持）
  - [ ] 复杂模板特化（待改进 - Q1 2025）
  - [ ] SFINAE模式识别（规划中 - Q2 2025）

#### 性能特性（实际测试数据）
```cpp
// 性能基准数据（基于实际项目测试）
namespace PerformanceMetrics {
    constexpr auto SMALL_FILE_TIME = "< 1s";     // <1000行
    constexpr auto MEDIUM_FILE_TIME = "< 5s";    // 1000-10000行  
    constexpr auto LARGE_FILE_TIME = "< 30s";    // >10000行
    constexpr auto PROJECT_100K_TIME = "< 5min"; // 10万行项目
    constexpr auto PROJECT_1M_TIME = "< 30min";  // 100万行项目
    constexpr auto MEMORY_USAGE = "< 4GB";       // 大型项目峰值内存
}
```

### 2. 日志识别系统

#### Qt 日志系统支持 (已实现功能完整)
```cpp
// 支持的Qt日志函数（与Memory Bank系统配置一致）
namespace QtLogFunctions {
    const std::vector<std::string> BASIC_FUNCTIONS = {
        "qDebug", "qInfo", "qWarning", "qCritical", "qFatal"
    };
    
    const std::vector<std::string> CATEGORY_FUNCTIONS = {
        "qCDebug", "qCInfo", "qCWarning", "qCCritical"
    };
}
```

- **基本日志函数识别**
  - [x] qDebug() - 调试信息输出
  - [x] qInfo() - 一般信息输出
  - [x] qWarning() - 警告信息输出
  - [x] qCritical() - 严重错误输出
  - [x] qFatal() - 致命错误输出

- **分类日志函数识别**
  - [x] qCDebug(category) - 分类调试信息
  - [x] qCInfo(category) - 分类一般信息
  - [x] qCWarning(category) - 分类警告信息
  - [x] qCCritical(category) - 分类严重错误

- **高级特性**
  - [x] 日志消息内容分析
  - [x] 格式化字符串解析
  - [x] 变量参数识别
  - [x] 条件日志输出识别

#### 自定义日志系统支持 (已实现 - 95%完成度)
```json
// 配置示例 - dlogcover.json
{
    "log_functions": {
        "custom": {
            "enabled": true,
            "functions": {
                "debug": ["LOG_DEBUG", "fmDebug", "DLOG_DEBUG"],
                "info": ["LOG_INFO", "fmInfo", "DLOG_INFO"],
                "warning": ["LOG_WARNING", "fmWarning", "DLOG_WARN"],
                "error": ["LOG_ERROR", "fmCritical", "DLOG_ERROR"],
                "fatal": ["LOG_FATAL", "DLOG_FATAL"]
            }
        }
    }
}
```

- **可配置的日志函数**
  - [x] 用户自定义日志函数名称
  - [x] 日志级别分类配置
  - [x] 多种日志框架支持（spdlog、glog等）
  - [x] 宏定义日志函数识别
  - [x] 函数式和流式日志API支持

- **智能识别能力**
  - [x] 函数调用上下文分析
  - [x] 参数类型和数量验证
  - [x] 日志级别自动推断
  - [x] 嵌套函数调用中的日志识别

### 3. 覆盖率分析系统

#### 多层次覆盖率计算 (已实现 - 88%完成度)

##### 函数级覆盖率
```cpp
struct FunctionCoverageMetrics {
    size_t totalFunctions;        // 总函数数量
    size_t coveredFunctions;      // 有日志的函数数量
    double coverageRatio;         // 覆盖率百分比
    std::vector<std::string> uncoveredFunctions; // 未覆盖函数列表
};
```

- **分析维度**
  - [x] 全局函数覆盖率
  - [x] 类成员函数覆盖率
  - [x] 静态函数覆盖率
  - [x] 模板函数覆盖率
  - [x] Lambda表达式覆盖率
  - [x] 构造函数/析构函数覆盖率

##### 分支级覆盖率
```cpp
struct BranchCoverageMetrics {
    size_t totalBranches;         // 总分支数量
    size_t coveredBranches;       // 有日志的分支数量
    double coverageRatio;         // 分支覆盖率
    std::vector<BranchInfo> uncoveredBranches; // 未覆盖分支
};
```

- **支持的分支类型**
  - [x] if/else 分支
  - [x] switch/case 分支
  - [x] 三元操作符分支
  - [x] 短路逻辑分支（&&、||）
  - [x] 嵌套分支结构
  - [ ] 复杂条件表达式分支（规划中）

##### 异常处理覆盖率
```cpp
struct ExceptionCoverageMetrics {
    size_t totalTryBlocks;        // 总try块数量
    size_t coveredTryBlocks;      // 有日志的try块数量
    size_t totalCatchBlocks;      // 总catch块数量
    size_t coveredCatchBlocks;    // 有日志的catch块数量
    double overallCoverageRatio;  // 总体异常覆盖率
};
```

- **异常处理分析**
  - [x] try块日志覆盖率
  - [x] catch块日志覆盖率
  - [x] finally块日志覆盖率
  - [x] 异常重新抛出分析
  - [x] RAII异常安全分析

##### 关键路径覆盖率
- **路径识别算法**
  - [x] 函数入口和出口路径
  - [x] 错误处理路径
  - [x] 业务逻辑关键分支
  - [x] 循环体关键路径
  - [ ] 复杂控制流路径（改进中）

### 4. 配置管理系统

#### 分层配置架构 (已实现 - 92%完成度)
```
命令行参数 (最高优先级)
    ↓
项目配置文件 (.dlogcover.json)
    ↓
用户配置文件 (~/.dlogcover/config.json)
    ↓
全局默认配置 (最低优先级)
```

#### 配置文件格式
```json
{
    "scan": {
        "directories": ["./src", "./include"],
        "excludes": ["build/", "test/", ".git/"],
        "file_types": [".cpp", ".cc", ".cxx", ".h", ".hpp"],
        "include_paths": "./include:./src",
        "is_qt_project": false,
        "compiler_args": ["-std=c++17", "-Wall"]
    },
    "log_functions": {
        "qt": {
            "enabled": true,
            "functions": ["qDebug", "qInfo", "qWarning"],
            "category_functions": ["qCDebug", "qCInfo"]
        },
        "custom": {
            "enabled": true,
            "functions": {
                "debug": ["LOG_DEBUG"],
                "info": ["LOG_INFO"],
                "warning": ["LOG_WARNING"]
            }
        }
    },
    "analysis": {
        "function_coverage": true,
        "branch_coverage": true,
        "exception_coverage": true,
        "key_path_coverage": true,
        "complexity_analysis": false
    },
    "report": {
        "format": "text",
        "output_file": "coverage_report.txt",
        "timestamp_format": "YYYYMMDD_HHMMSS",
        "include_suggestions": true
    }
}
```

### 5. 命令行接口

#### 完整的CLI支持 (已实现 - 85%完成度)
```bash
# 基本使用
dlogcover                                    # 默认扫描当前目录
dlogcover -d /path/to/project               # 指定项目目录
dlogcover -o report.txt                     # 指定输出文件
dlogcover -c config.json                    # 使用配置文件
dlogcover -f json                           # JSON格式输出

# 高级选项
dlogcover --exclude "build/,test/"          # 排除目录
dlogcover --log-level warning               # 日志级别过滤
dlogcover --format json                     # 报告格式选择
dlogcover --progress                        # 显示进度条
dlogcover --verbose                         # 详细输出模式
```

#### 支持的命令行选项
- **基本选项**
  - [x] `-d, --directory` - 扫描目录路径
  - [x] `-o, --output` - 输出文件路径
  - [x] `-c, --config` - 配置文件路径
  - [x] `-f, --format` - 报告格式（text/json）
  - [x] `-h, --help` - 显示帮助信息
  - [x] `-v, --version` - 显示版本信息

- **高级选项**
  - [x] `--exclude` - 排除模式
  - [x] `--log-level` - 日志级别过滤
  - [x] `--progress` - 显示进度信息
  - [x] `--verbose` - 详细输出模式
  - [x] `--quiet` - 安静模式
  - [ ] `--parallel` - 并行分析线程数（规划中）

### 6. 报告生成系统

#### 多格式报告支持 (已实现 - 80%完成度)

##### 文本格式报告
```
DLogCover 覆盖率报告
====================
项目: MyProject
时间: 2024-12-15 14:30:25
扫描目录: ./src

总体统计:
- 总文件数: 25
- 分析文件数: 23
- 总函数数: 150
- 有日志函数数: 120
- 函数覆盖率: 80.00%
- 分支覆盖率: 75.50%
- 异常处理覆盖率: 90.00%
- 总体覆盖率: 81.83%

文件详情:
src/main.cpp: 95.00% (19/20 函数有日志)
src/utils.cpp: 70.00% (14/20 函数有日志)
...

改进建议:
1. 函数 'processData' 在 src/processor.cpp:45 缺少日志记录
2. if分支 在 src/handler.cpp:23 缺少日志覆盖
...
```

##### JSON格式报告
```json
{
    "project_name": "MyProject",
    "timestamp": "2024-12-15T14:30:25Z",
    "scan_directory": "./src",
    "overall_metrics": {
        "total_files": 25,
        "analyzed_files": 23,
        "total_functions": 150,
        "covered_functions": 120,
        "function_coverage_ratio": 0.8000,
        "branch_coverage_ratio": 0.7550,
        "exception_coverage_ratio": 0.9000,
        "overall_coverage_ratio": 0.8183
    },
    "file_details": [
        {
            "file_path": "src/main.cpp",
            "function_coverage_ratio": 0.95,
            "covered_functions": 19,
            "total_functions": 20,
            "uncovered_functions": [
                {
                    "name": "cleanup",
                    "line": 78,
                    "reason": "no_log_statements"
                }
            ]
        }
    ],
    "suggestions": [
        {
            "type": "missing_function_log",
            "file": "src/processor.cpp",
            "line": 45,
            "function": "processData",
            "suggestion": "Add logging for function entry and exit"
        }
    ]
}
```

##### HTML报告 (规划中 - 0%完成度)
- [ ] 交互式覆盖率图表
- [ ] 代码浏览器集成
- [ ] 钻取式详细分析
- [ ] 响应式设计支持

### 7. 文件管理系统

#### 智能文件发现 (已实现 - 95%完成度)
```cpp
class SourceManager {
    // 支持的文件扩展名
    static const std::vector<std::string> DEFAULT_EXTENSIONS = {
        ".cpp", ".cc", ".cxx", ".c++",
        ".h", ".hpp", ".hxx", ".h++"
    };
    
    // 默认排除模式
    static const std::vector<std::string> DEFAULT_EXCLUDES = {
        "build/", "build-*/", "_build/",
        "test/", "tests/", "*_test/",
        ".git/", ".svn/", ".hg/",
        "third_party/", "3rdparty/", "vendor/"
    };
};
```

- **文件过滤功能**
  - [x] 扩展名过滤
  - [x] 路径模式排除
  - [x] 正则表达式支持
  - [x] 文件大小限制
  - [x] 符号链接处理
  - [x] 隐藏文件处理

- **性能优化**
  - [x] 并行目录扫描
  - [x] 内存效率优化
  - [x] 大型项目支持（>100万行）
  - [x] 进度反馈机制

### 8. 实用工具库

#### 错误处理机制 (已实现 - 90%完成度)
```cpp
template<typename T>
class Result {
public:
    bool isSuccess() const;
    bool isError() const;
    const T& getValue() const;
    const Error& getError() const;
    
    // 链式操作支持
    template<typename F>
    auto map(F&& func) -> Result<decltype(func(getValue()))>;
    
    template<typename F>
    Result<T> flatMap(F&& func);
};
```

#### 日志记录系统
```cpp
// 日志级别定义
enum class LogLevel {
    DEBUG = 0,
    INFO = 1,
    WARNING = 2,
    ERROR = 3,
    FATAL = 4
};

// 日志宏定义
#define LOG_DEBUG_FMT(fmt, ...) \
    LogUtils::log(LogLevel::DEBUG, __FILE__, __LINE__, fmt, ##__VA_ARGS__)

#define LOG_INFO_FMT(fmt, ...) \
    LogUtils::log(LogLevel::INFO, __FILE__, __LINE__, fmt, ##__VA_ARGS__)
```

## 性能特性和限制

### 性能基准
| 项目规模 | 文件数量 | 代码行数 | 分析时间 | 内存使用 |
|----------|----------|----------|----------|----------|
| 小型项目 | <50 | <10K | <10s | <100MB |
| 中型项目 | 50-500 | 10K-100K | <5min | <500MB |
| 大型项目 | 500-5000 | 100K-1M | <30min | <2GB |
| 超大项目 | >5000 | >1M | <2h | <4GB |

### 已知限制
1. **模板特化支持有限**：复杂模板特化的解析准确度约85%
2. **宏展开分析**：宏定义的日志函数识别准确度约90%
3. **跨文件分析**：函数调用链的跨文件分析能力有限
4. **动态分析缺失**：仅支持静态代码分析，无运行时分析

## 质量保证特性

### 测试覆盖率
- **单元测试覆盖率**：82%（目标：90%+）
- **集成测试覆盖率**：75%
- **端到端测试覆盖率**：60%

### 代码质量工具
- [x] Clang-tidy 静态分析
- [x] AddressSanitizer 内存检查
- [x] 代码覆盖率监控
- [x] 性能基准测试
- [ ] Fuzzing测试（规划中）

## 扩展性和插件支持

### 当前扩展点
- [x] 自定义日志函数识别策略
- [x] 自定义报告格式生成器
- [x] 自定义覆盖率计算算法
- [x] 自定义文件过滤器

### 规划中的扩展
- [ ] 插件API框架
- [ ] 第三方分析器集成
- [ ] 自定义AST访问器
- [ ] 外部工具集成接口

这个功能规格文档为DLogCover项目的功能实现提供了完整的指导，确保所有功能都按照统一的标准和最佳实践进行开发。
