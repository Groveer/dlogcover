---
description:
globs:
alwaysApply: false
---
---
description: 日志分析模块实现指南
globs: **/core/log_analyzer/**, **/core/coverage/**
alwaysApply: true
---
# DLogCover 日志分析模块指南

## 日志级别管理策略

### AST分析器日志规整 (2025-06-10 更新)

基于用户体验优化，AST分析器的日志输出已进行系统性规整：

#### INFO级别日志（用户友好）
保留关键状态信息，提供简洁的分析进度：
- 文件分析开始和完成状态
- AST分析统计汇总
- 错误恢复尝试信息
- 重要的警告信息

```cpp
// 示例：保持INFO级别的关键日志
LOG_INFO("开始分析文件: {}", filePath);
LOG_INFO("文件分析完成: {} - 函数: {}, 类: {}, 命名空间: {}", 
         filePath, functionCount, classCount, namespaceCount);
LOG_INFO("AST分析统计 - 总函数: {}, 总类: {}, 总命名空间: {}", 
         totalFunctions, totalClasses, totalNamespaces);
```

#### DEBUG级别日志（开发调试）
详细的AST解析过程信息，用于开发和问题排查：
- 每个声明的遍历和分析过程
- 函数、类、命名空间的发现过程
- 节点创建和添加的详细步骤
- 预览声明的详细信息
- 命名空间递归分析的详细过程

```cpp
// 示例：调整为DEBUG级别的详细日志
LOG_DEBUG("发现函数声明: {} 在 {}:{}", functionName, fileName, lineNumber);
LOG_DEBUG("准备分析函数: {}", functionName);
LOG_DEBUG("成功添加函数节点: {}", functionName);
LOG_DEBUG("递归分析命名空间: {}", namespaceName);
LOG_DEBUG("命名空间中发现 {} 个声明", declarationCount);
```

#### 日志级别选择原则
1. **INFO级别**：用户关心的核心进度和结果信息
2. **DEBUG级别**：开发者需要的详细执行过程
3. **WARNING级别**：需要用户注意但不影响执行的问题
4. **ERROR级别**：影响分析结果的错误信息

### 性能影响评估
日志级别规整带来的性能提升：
- 减少INFO级别日志输出量约80%
- 提升大型项目分析的用户体验
- 保持完整的调试能力（DEBUG级别）
- 降低日志I/O开销

## 日志函数识别

### 支持的日志类型
- Qt日志系统：qDebug, qInfo, qWarning, qCritical, qFatal
- Qt分类日志：qCDebug, qCInfo, qCWarning, qCCritical
- 自定义日志函数（可通过配置文件定义）

### 日志函数识别策略
- 基于函数名称识别日志函数调用
- 支持命名空间限定的日志函数
- 支持宏定义的日志函数
- 排除系统头文件中的日志调用

```cpp
// 检查函数调用是否为日志函数
bool LogAnalyzer::isLogFunction(const std::string &FuncName) const {
    // 检查Qt日志函数
    static const std::set<std::string> QtLogFuncs = {
        "qDebug", "qInfo", "qWarning", "qCritical", "qFatal",
        "qCDebug", "qCInfo", "qCWarning", "qCCritical"
    };
    
    if (QtLogFuncs.find(FuncName) != QtLogFuncs.end()) {
        return true;
    }
    
    // 检查自定义日志函数
    for (const auto &func : mCustomLogFunctions) {
        if (FuncName == func) {
            return true;
        }
    }
    
    return false;
}
```

### 日志调用信息收集
- 记录日志函数的名称、位置、所在函数等信息
- 识别日志的级别（调试、信息、警告、错误等）
- 收集日志调用的上下文信息

## 覆盖率计算

### 函数级日志覆盖率
- 检查函数是否包含入口日志
- 检查函数是否包含返回前的日志
- 计算函数体中的日志密度

```cpp
// 计算函数的日志覆盖率
double CoverageCalculator::calculateFunctionCoverage(
    const FunctionInfo &FuncInfo,
    const std::vector<LogCallInfo> &LogCalls) {
    
    bool hasEntryLog = false;
    bool hasExitLog = false;
    int logCount = 0;
    
    // 分析日志调用
    for (const auto &LogCall : LogCalls) {
        if (isInFunction(LogCall, FuncInfo)) {
            logCount++;
            
            // 检查是否为入口日志
            if (isEntryLog(LogCall, FuncInfo)) {
                hasEntryLog = true;
            }
            
            // 检查是否为退出日志
            if (isExitLog(LogCall, FuncInfo)) {
                hasExitLog = true;
            }
        }
    }
    
    // 计算覆盖率
    double coverage = 0.0;
    if (FuncInfo.complexity > 0) {
        // 基于函数复杂度和日志分布计算覆盖率
        // ...
    }
    
    return coverage;
}
```

### 分支覆盖率
- 识别条件分支语句（if-else, switch-case等）
- 检查每个分支中是否包含日志
- 计算带日志的分支占总分支的比例

```cpp
// 计算分支的日志覆盖率
double CoverageCalculator::calculateBranchCoverage(
    const std::vector<BranchInfo> &Branches,
    const std::vector<LogCallInfo> &LogCalls) {
    
    if (Branches.empty()) {
        return 1.0; // 没有分支视为100%覆盖
    }
    
    int coveredBranches = 0;
    
    for (const auto &Branch : Branches) {
        bool isCovered = false;
        
        // 检查分支内是否有日志调用
        for (const auto &LogCall : LogCalls) {
            if (isInBranch(LogCall, Branch)) {
                isCovered = true;
                break;
            }
        }
        
        if (isCovered) {
            coveredBranches++;
        }
    }
    
    return static_cast<double>(coveredBranches) / Branches.size();
}
```

### 异常处理覆盖率
- 识别异常处理代码（try-catch块）
- 检查catch块中是否包含日志
- 计算带日志的catch块占总catch块的比例

```cpp
// 计算异常处理的日志覆盖率
double CoverageCalculator::calculateExceptionCoverage(
    const std::vector<ExceptionInfo> &Exceptions,
    const std::vector<LogCallInfo> &LogCalls) {
    
    if (Exceptions.empty()) {
        return 1.0; // 没有异常处理视为100%覆盖
    }
    
    int coveredExceptions = 0;
    
    for (const auto &Exception : Exceptions) {
        bool isCovered = false;
        
        // 检查catch块内是否有日志调用
        for (const auto &LogCall : LogCalls) {
            if (isInException(LogCall, Exception)) {
                isCovered = true;
                break;
            }
        }
        
        if (isCovered) {
            coveredExceptions++;
        }
    }
    
    return static_cast<double>(coveredExceptions) / Exceptions.size();
}
```

### 关键路径覆盖率
- 识别程序的关键执行路径
- 检查关键路径上是否有足够的日志点
- 计算关键路径上带日志的节点占比

## 覆盖率评估

### 覆盖率等级
- 优秀（90%以上）：几乎所有重要代码路径都有日志覆盖
- 良好（75%-90%）：大多数重要代码路径有日志覆盖
- 一般（50%-75%）：主要代码路径有日志覆盖，但有改进空间
- 不足（50%以下）：日志覆盖率低，难以进行问题定位

### 覆盖率报告
- 生成覆盖率总体统计
- 按文件和函数列出覆盖率详情
- 标识未覆盖或覆盖率低的关键区域
- 提供改进建议

```cpp
// 生成覆盖率报告
void ReportGenerator::generateCoverageReport(
    const std::string &outputPath,
    const CoverageResult &coverageResult) {
    
    std::ofstream outFile(outputPath);
    if (!outFile) {
        llvm::errs() << "Error: Cannot open output file: " << outputPath << "\n";
        return;
    }
    
    // 生成报告头部
    outFile << "=== DLogCover 日志覆盖率分析报告 ===\n";
    outFile << "分析时间: " << getCurrentTimestamp() << "\n";
    outFile << "项目路径: " << coverageResult.projectPath << "\n\n";
    
    // 总体统计
    outFile << "=== 总体统计 ===\n";
    outFile << "总文件数: " << coverageResult.totalFiles << "\n";
    outFile << "总函数数: " << coverageResult.totalFunctions << "\n";
    outFile << "有日志函数数: " << coverageResult.functionsWithLogs << "\n";
    outFile << "总体覆盖率: " << std::fixed << std::setprecision(2) 
            << coverageResult.overallCoverage << "%\n\n";
    
    // 按文件详细统计
    outFile << "=== 文件详细统计 ===\n";
    for (const auto &fileResult : coverageResult.fileResults) {
        outFile << "文件: " << fileResult.filePath << "\n";
        outFile << "  函数数: " << fileResult.functionCount << "\n";
        outFile << "  有日志函数数: " << fileResult.functionsWithLogs << "\n";
        outFile << "  覆盖率: " << std::fixed << std::setprecision(2) 
                << fileResult.coverage << "%\n";
        
        // 列出未覆盖的函数
        if (!fileResult.uncoveredFunctions.empty()) {
            outFile << "  未覆盖函数:\n";
            for (const auto &func : fileResult.uncoveredFunctions) {
                outFile << "    - " << func.name << " (行 " << func.line << ")\n";
            }
        }
        outFile << "\n";
    }
    
    // 改进建议
    outFile << "=== 改进建议 ===\n";
    if (coverageResult.overallCoverage < 50.0) {
        outFile << "- 日志覆盖率较低，建议在关键函数入口和出口添加日志\n";
        outFile << "- 重点关注错误处理路径的日志记录\n";
    } else if (coverageResult.overallCoverage < 75.0) {
        outFile << "- 日志覆盖率一般，建议完善分支条件的日志记录\n";
        outFile << "- 关注异常处理块的日志输出\n";
    } else if (coverageResult.overallCoverage < 90.0) {
        outFile << "- 日志覆盖率良好，建议优化日志内容的信息量\n";
        outFile << "- 考虑添加性能关键路径的日志记录\n";
    } else {
        outFile << "- 日志覆盖率优秀，建议定期审查日志的有效性\n";
        outFile << "- 可以考虑优化日志级别和输出格式\n";
    }
}
```

## 最佳实践

### 日志级别使用指南
1. **DEBUG**: 详细的执行流程，仅在开发调试时启用
2. **INFO**: 重要的状态变化和处理结果，用户关心的信息
3. **WARNING**: 可能的问题，但不影响正常执行
4. **ERROR**: 错误情况，影响功能正常执行
5. **FATAL**: 严重错误，导致程序无法继续执行

### 性能考虑
- 避免在循环中使用过多的DEBUG日志
- 使用条件编译优化发布版本的日志开销
- 考虑异步日志输出以减少I/O阻塞
- 定期清理和归档日志文件

### 代码质量
- 日志信息应该清晰、准确、有意义
- 避免敏感信息泄露到日志中
- 使用结构化日志格式便于后续分析
- 保持日志格式的一致性
