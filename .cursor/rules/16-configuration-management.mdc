---
description:
globs:
alwaysApply: false
---
# DLogCover 配置管理系统指南

## 配置系统架构

### 核心组件

```cpp
// 配置系统主要组件
namespace dlogcover {
    namespace cli {
        class CommandLineParser;     // 命令行解析器
        class ConfigValidator;       // 配置验证器
        struct Options;             // 命令行选项结构
    }
    
    namespace config {
        class ConfigManager;        // 配置管理器
        struct Config;             // 配置结构
        class CompileCommandsManager; // 编译命令管理器
    }
}
```

### 配置优先级

DLogCover 采用分层配置系统，优先级从高到低：

```
命令行参数 > 配置文件 > 环境变量 > 默认值
```

## 命令行参数系统

### 支持的命令行选项

#### 主要选项
```bash
# 基本选项
-h, --help                 # 显示帮助信息
-v, --version              # 显示版本信息
-d, --directory <path>     # 指定扫描目录 (默认: ./)
-o, --output <path>        # 指定输出报告路径
-c, --config <path>        # 指定配置文件路径 (默认: ./dlogcover.json)

# 日志和输出控制
-l, --log-level <level>    # 日志级别 (debug, info, warning, critical, fatal, all)
-f, --format <format>      # 报告格式 (text, json)
-p, --log-path <path>      # 日志文件路径
-q, --quiet                # 静默模式
    --verbose              # 详细输出模式

# 文件过滤
-e, --exclude <pattern>    # 排除模式 (可多次使用)
-I, --include-path <path>  # 头文件搜索路径 (可多次使用)

# 高级选项
    --compiler-arg <arg>   # 编译器参数 (可多次使用)
    --include-system-headers # 包含系统头文件分析
    --threshold <value>    # 覆盖率阈值 (0.0-1.0)
    --parallel <num>       # 并行分析线程数
```

#### 默认值定义

```cpp
// 默认值常量 (config_constants.h)
namespace dlogcover::config::cli {
    constexpr const char* DEFAULT_DIRECTORY = ".";
    constexpr const char* DEFAULT_OUTPUT = "";
    constexpr const char* DEFAULT_CONFIG = "";
}

// 运行时默认值生成
namespace DefaultValues {
    // 输出文件：dlogcover_report_<timestamp>.txt
    std::string generateDefaultOutput() {
        auto now = std::chrono::system_clock::now();
        auto time_t = std::chrono::system_clock::to_time_t(now);
        std::stringstream ss;
        ss << "dlogcover_report_" << std::put_time(std::localtime(&time_t), "%Y%m%d_%H%M%S") << ".txt";
        return ss.str();
    }
    
    // 日志文件：dlogcover_<timestamp>.log
    std::string generateDefaultLogFile() {
        auto now = std::chrono::system_clock::now();
        auto time_t = std::chrono::system_clock::to_time_t(now);
        std::stringstream ss;
        ss << "dlogcover_" << std::put_time(std::localtime(&time_t), "%Y%m%d_%H%M%S") << ".log";
        return ss.str();
    }
}
```

### 命令行解析实现

#### 解析流程

```cpp
// 命令行解析主流程
class CommandLineParser {
public:
    ErrorResult parse(int argc, char** argv) {
        // 1. 从环境变量加载选项
        ConfigValidator validator;
        if (!validator.loadFromEnvironment(options_)) {
            return ErrorResult(validator.getErrorCode(), validator.getError());
        }
        
        // 2. 处理配置文件参数（优先处理）
        for (size_t i = 0; i < args.size(); ++i) {
            if (isConfigOption(args[i])) {
                handleConfigOption(args, i, validator);
            }
        }
        
        // 3. 处理其他命令行参数
        for (size_t i = 0; i < args.size(); ++i) {
            handleOtherOptions(args, i);
        }
        
        // 4. 验证最终选项
        return options_.validate();
    }
};
```

#### 参数验证

```cpp
// 选项验证实现
struct Options {
    ErrorResult validate() const {
        // 验证目录路径
        if (!directory.empty() && !std::filesystem::exists(directory)) {
            return ErrorResult(ConfigError::DirectoryNotFound, 
                             "目录不存在: " + directory);
        }
        
        // 验证输出目录
        if (!output_file.empty()) {
            auto parentPath = std::filesystem::path(output_file).parent_path();
            if (!parentPath.empty() && !std::filesystem::exists(parentPath)) {
                return ErrorResult(ConfigError::OutputDirectoryNotFound,
                                 "输出目录不存在: " + parentPath.string());
            }
        }
        
        // 验证并行线程数
        if (parallel < 1) {
            return ErrorResult(ConfigError::InvalidArgument,
                             "并行线程数必须大于0");
        }
        
        // 验证覆盖率阈值
        if (threshold < 0.0 || threshold > 1.0) {
            return ErrorResult(ConfigError::InvalidArgument,
                             "覆盖率阈值必须在0.0-1.0之间");
        }
        
        return ErrorResult(); // 验证成功
    }
};
```

## 环境变量支持

### 支持的环境变量

```bash
# 环境变量映射
export DLOGCOVER_DIRECTORY="./src"          # 等同于 -d 选项
export DLOGCOVER_OUTPUT="./report.txt"      # 等同于 -o 选项
export DLOGCOVER_CONFIG="./config.json"     # 等同于 -c 选项
export DLOGCOVER_LOG_LEVEL="debug"          # 等同于 -l 选项
export DLOGCOVER_REPORT_FORMAT="json"       # 等同于 -f 选项
export DLOGCOVER_EXCLUDE="build/*:test/*"   # 排除模式，冒号分隔
export DLOGCOVER_LOG_PATH="./analysis.log"  # 等同于 -p 选项
```

### 环境变量加载实现

```cpp
// 环境变量加载器
class ConfigValidator {
public:
    bool loadFromEnvironment(Options& options) {
        // 加载基本路径选项
        loadEnvString("DLOGCOVER_DIRECTORY", options.directory);
        loadEnvString("DLOGCOVER_OUTPUT", options.output_file);
        loadEnvString("DLOGCOVER_CONFIG", options.configPath);
        loadEnvString("DLOGCOVER_LOG_PATH", options.log_file);
        
        // 加载日志级别
        std::string logLevel;
        if (loadEnvString("DLOGCOVER_LOG_LEVEL", logLevel)) {
            LogLevel level;
            if (parseLogLevelString(logLevel, level)) {
                options.logLevel = level;
            }
        }
        
        // 加载报告格式
        std::string reportFormat;
        if (loadEnvString("DLOGCOVER_REPORT_FORMAT", reportFormat)) {
            ReportFormat format;
            if (parseReportFormatString(reportFormat, format)) {
                options.reportFormat = format;
            }
        }
        
        // 加载排除模式（冒号分隔）
        std::string excludePatterns;
        if (loadEnvString("DLOGCOVER_EXCLUDE", excludePatterns)) {
            options.excludePatterns = splitString(excludePatterns, ':');
        }
        
        return true;
    }
    
private:
    bool loadEnvString(const char* envName, std::string& target) {
        const char* value = std::getenv(envName);
        if (value && strlen(value) > 0) {
            target = value;
            return true;
        }
        return false;
    }
};
```

## 配置文件系统

### 配置文件结构

DLogCover 使用 JSON 格式的配置文件，支持以下结构：

```json
{
    "project": {
        "name": "项目名称",
        "directory": "项目根目录",
        "build_directory": "构建目录"
    },
    "scan": {
        "directories": ["扫描目录列表"],
        "file_extensions": ["文件扩展名列表"],
        "exclude_patterns": ["排除模式列表"]
    },
    "compile_commands": {
        "path": "compile_commands.json路径",
        "auto_generate": true,
        "cmake_args": ["CMake参数列表"]
    },
    "output": {
        "report_file": "报告文件名",
        "log_file": "日志文件名",
        "log_level": "日志级别"
    },
         "log_functions": {
         "qt": {
             "enabled": true,
             "functions": ["qDebug", "qInfo", "qWarning", "qCritical", "qFatal"],
             "category_functions": ["qCDebug", "qCInfo", "qCWarning", "qCCritical"]
         },
         "custom": {
             "enabled": true,
             "functions": {
                 "debug": ["logDebug", "LOG_DEBUG", "LOG_DEBUG_FMT"],
                 "info": ["logInfo", "LOG_INFO", "LOG_INFO_FMT"],
                 "warning": ["logWarning", "LOG_WARNING", "LOG_WARNING_FMT"],
                 "error": ["logError", "LOG_ERROR", "LOG_ERROR_FMT"],
                 "fatal": ["logFatal", "LOG_FATAL", "LOG_FATAL_FMT"]
             }
         }
     },
    "analysis": {
        "function_coverage": true,
        "branch_coverage": true,
        "exception_coverage": true,
        "key_path_coverage": true
    }
}
```

### 默认配置生成

```cpp
// 默认配置创建逻辑
Config ConfigManager::createDefaultConfig(const std::string& project_dir) {
    Config config;
    std::string actualProjectDir = project_dir.empty() ? 
        std::filesystem::current_path().string() : project_dir;

    // 项目配置
    config.project.name = std::filesystem::path(actualProjectDir).filename().string();
    if (config.project.name.empty() || config.project.name == ".") {
        config.project.name = "dlog-project";
    }
    config.project.directory = actualProjectDir;
    config.project.build_directory = (std::filesystem::path(actualProjectDir) / "build").string();

    // 扫描配置
    config.scan.directories = {"include", "src", "tests"};
    config.scan.file_extensions = {".cpp", ".h", ".cxx", ".hpp"};
    config.scan.exclude_patterns = {"*build*", "*/build/*"};

    // 编译命令配置
    config.compile_commands.path = (std::filesystem::path(config.project.build_directory) / "compile_commands.json").string();
    config.compile_commands.auto_generate = true;
    config.compile_commands.cmake_args = {"-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"};

    // 输出配置
    config.output.report_file = "dlogcover_report.txt";
    config.output.log_file = "dlogcover.log";
    config.output.log_level = "INFO";

    // 分析配置
    config.analysis.function_coverage = true;
    config.analysis.branch_coverage = true;
    config.analysis.exception_coverage = true;
    config.analysis.key_path_coverage = true;

    return config;
}
```

### 配置文件加载和验证

```cpp
// 配置文件解析实现
class ConfigManager {
public:
    bool loadConfig(const std::string& config_path) {
        LOG_INFO_FMT("加载配置文件: %s", config_path.c_str());

        if (!std::filesystem::exists(config_path)) {
            setError("配置文件不存在: " + config_path);
            return false;
        }

        if (!parseConfigFile(config_path)) {
            return false;
        }

        if (!validateConfig()) {
            return false;
        }

        loaded_ = true;
        LOG_INFO("配置文件加载成功");
        return true;
    }

private:
    bool parseConfigFile(const std::string& config_path) {
        try {
            std::ifstream file(config_path);
            nlohmann::json json_config;
            file >> json_config;

            // 解析各个配置段
            parseProjectConfig(json_config);
            parseScanConfig(json_config);
            parseCompileCommandsConfig(json_config);
            parseOutputConfig(json_config);
            
            return true;
        } catch (const std::exception& e) {
            setError("解析配置文件失败: " + std::string(e.what()));
            return false;
        }
    }
};
```

## 配置合并策略

### 合并流程

```cpp
// 配置合并实现
void ConfigManager::mergeWithCommandLineOptions(const cli::Options& options) {
    LOG_DEBUG("合并命令行选项");

    // 1. 项目目录覆盖
    if (!options.directory.empty()) {
        config_.project.directory = options.directory;
        LOG_DEBUG_FMT("设置项目目录: %s", config_.project.directory.c_str());
    }

    // 2. 排除模式追加（不覆盖）
    if (!options.excludePatterns.empty()) {
        config_.scan.exclude_patterns.insert(
            config_.scan.exclude_patterns.end(),
            options.excludePatterns.begin(),
            options.excludePatterns.end()
        );
        LOG_DEBUG_FMT("添加 %zu 个命令行排除模式", options.excludePatterns.size());
    }

    // 3. 输出配置覆盖
    if (!options.output_file.empty()) {
        config_.output.report_file = options.output_file;
    }
    
    if (!options.log_file.empty()) {
        config_.output.log_file = options.log_file;
    }

    // 4. 日志级别转换和覆盖
    if (options.logLevel != cli::LogLevel::UNKNOWN) {
        config_.output.log_level = logLevelToString(options.logLevel);
        LOG_DEBUG_FMT("设置日志级别: %s", config_.output.log_level.c_str());
    }
}
```

### 日志级别映射

```cpp
// 日志级别枚举和字符串映射
enum class LogLevel {
    UNKNOWN,    // 未设置
    DEBUG,      // 调试信息
    INFO,       // 一般信息
    WARNING,    // 警告信息
    CRITICAL,   // 严重错误
    FATAL,      // 致命错误
    ALL         // 所有级别
};

// 字符串到枚举的映射
const std::map<std::string, LogLevel> LOG_LEVEL_MAP = {
    {"debug", LogLevel::DEBUG},
    {"info", LogLevel::INFO},
    {"warning", LogLevel::WARNING},
    {"critical", LogLevel::CRITICAL},
    {"fatal", LogLevel::FATAL},
    {"all", LogLevel::ALL}
};

// 枚举到字符串的转换
std::string logLevelToString(LogLevel level) {
    switch (level) {
        case LogLevel::DEBUG:    return "DEBUG";
        case LogLevel::INFO:     return "INFO";
        case LogLevel::WARNING:  return "WARNING";
        case LogLevel::CRITICAL: return "CRITICAL";
        case LogLevel::FATAL:    return "FATAL";
        case LogLevel::ALL:      return "ALL";
        default:                 return "INFO";
    }
}
```

## 配置验证系统

### 验证规则

```cpp
// 配置验证实现
class ConfigManager {
private:
    bool validateConfig() const {
        return validateProjectConfig() && 
               validateScanConfig() && 
               validateCompileCommandsConfig();
    }

    bool validateProjectConfig() const {
        if (config_.project.directory.empty()) {
            LOG_ERROR("项目目录不能为空");
            return false;
        }

        if (!std::filesystem::exists(config_.project.directory)) {
            LOG_ERROR_FMT("项目目录不存在: %s", config_.project.directory.c_str());
            return false;
        }

        return true;
    }

    bool validateScanConfig() const {
        if (config_.scan.directories.empty()) {
            LOG_ERROR("扫描目录列表不能为空");
            return false;
        }

        if (config_.scan.file_extensions.empty()) {
            LOG_ERROR("文件扩展名列表不能为空");
            return false;
        }

        // 检查文件扩展名格式
        for (const auto& ext : config_.scan.file_extensions) {
            if (ext.empty() || ext[0] != '.') {
                LOG_ERROR_FMT("文件扩展名格式错误: %s", ext.c_str());
                return false;
            }
        }

        return true;
    }

    bool validateCompileCommandsConfig() const {
        if (config_.compile_commands.path.empty()) {
            LOG_ERROR("compile_commands.json路径不能为空");
            return false;
        }

        return true;
    }
};
```

## 错误处理系统

### 错误类型定义

```cpp
// 配置错误类型枚举
enum class ConfigError {
    None = 0,                           // 无错误
    FileNotFound = 1,                   // 文件未找到
    DirectoryNotFound = 2,              // 目录未找到
    OutputDirectoryNotFound = 3,        // 输出目录未找到
    InvalidVersion = 4,                 // 无效版本
    InvalidType = 5,                    // 无效类型
    MissingField = 6,                   // 缺少字段
    InvalidLogLevel = 7,                // 无效日志级别
    InvalidReportFormat = 8,            // 无效报告格式
    InvalidExcludePattern = 9,          // 无效排除模式
    ParseError = 10,                    // 解析错误
    EnvironmentError = 11,              // 环境变量错误
    UnknownOption = 12,                 // 未知选项
    InvalidLogPath = 13,                // 无效日志路径
    MissingValue = 14,                  // 缺少值
    InvalidArgument = 15,               // 无效参数
    MissingArgument = 16                // 缺少参数
};

// 错误结果类
class ErrorResult {
private:
    ConfigError errorCode_;
    std::string message_;

public:
    ErrorResult() : errorCode_(ConfigError::None) {}
    ErrorResult(ConfigError code, const std::string& msg) 
        : errorCode_(code), message_(msg) {}

    bool hasError() const { return errorCode_ != ConfigError::None; }
    ConfigError getErrorCode() const { return errorCode_; }
    const std::string& message() const { return message_; }
};
```

## 使用示例

### 基本使用流程

```cpp
// 完整的配置加载流程
int main(int argc, char* argv[]) {
    try {
        // 1. 解析命令行参数
        cli::CommandLineParser commandLineParser;
        auto parseResult = commandLineParser.parse(argc, argv);
        
        if (commandLineParser.isHelpOrVersionRequest()) {
            return 0;
        }

        if (parseResult.hasError()) {
            std::cerr << "参数解析错误: " << parseResult.message() << std::endl;
            commandLineParser.showHelp();
            return 1;
        }

        // 2. 初始化配置管理器
        config::ConfigManager configManager;

        // 3. 加载配置文件（如果指定）
        const auto& parsedOptions = commandLineParser.getOptions();
        if (!parsedOptions.configPath.empty()) {
            if (!configManager.loadConfig(parsedOptions.configPath)) {
                std::cerr << "错误: 无法加载配置文件: " << parsedOptions.configPath 
                         << " - " << configManager.getError() << std::endl;
                return 1;
            }
        } else {
            // 尝试在当前目录查找dlogcover.json
            if (std::filesystem::exists("dlogcover.json")) {
                LOG_INFO("在当前目录找到 dlogcover.json，将加载它。");
                if (!configManager.loadConfig("dlogcover.json")) {
                    std::cerr << "错误: 无法加载 dlogcover.json - " 
                             << configManager.getError() << std::endl;
                    return 1;
                }
            }
        }
        
        // 4. 合并命令行参数
        configManager.mergeWithCommandLineOptions(parsedOptions);
        
        // 5. 获取最终配置
        const config::Config& config = configManager.getConfig();
        
        // 6. 使用配置进行分析...
        
    } catch (const std::exception& e) {
        std::cerr << "程序执行错误: " << e.what() << std::endl;
        return 1;
    }
    
    return 0;
}
```

### 配置文件生成

```cpp
// 生成默认配置文件
bool generateDefaultConfigFile(const std::string& project_dir) {
    std::string config_path = project_dir + "/dlogcover.json";
    
    if (config::ConfigManager::generateDefaultConfig(config_path, project_dir)) {
        std::cout << "成功生成默认配置文件: " << config_path << std::endl;
        return true;
    } else {
        std::cerr << "生成默认配置文件失败" << std::endl;
        return false;
    }
}
```

## 最佳实践

### 配置文件组织

1. **项目级配置**: 在项目根目录放置 `dlogcover.json`
2. **用户级配置**: 在用户主目录放置 `.dlogcover.json`
3. **系统级配置**: 在系统配置目录放置全局配置

### 参数优先级使用

1. **开发阶段**: 使用命令行参数快速调试
2. **CI/CD**: 使用环境变量配置
3. **项目标准**: 使用配置文件定义项目标准

### 错误处理

1. **详细错误信息**: 提供具体的错误位置和原因
2. **优雅降级**: 配置错误时使用默认值
3. **用户友好**: 提供修复建议和帮助信息

这个配置管理系统为DLogCover提供了灵活、可扩展的配置能力，支持多种配置来源和验证机制，确保了系统的可靠性和易用性。
